设计模式 - 七大设计原则
    1.单一职责原则 : 对类而言一个类应该只负责一项职责,降低类的复杂度,只有逻辑足够简单才能在方法级别保持单一原则
    2.接口隔离原则 : 即一个类通过接口去依赖另一个类时,我们期望这次依赖的接口粒度是最小的
    3.依赖倒置原则 : 中心思想-面向接口编程,使用接口或者抽象类的目的是为了制定规范,而不涉及具体操作,将细节交给实现类
        依赖传递的三种方式 :
            a.接口实现依赖传递
            b.构造器实现依赖传递
            c.setter方法实现依赖传递
    4.里氏替换原则 : 所有引用基类的地方必须能透明的使用其子类对象,即:在使用继承时,子类尽量不要重写父类方法
    5.开闭原则(ocp) : 最重要-----
    6.迪米特法则 : 又称最小知道原则,即被依赖的类不管多复杂,都尽量将逻辑封装在自己内部,对外除了提供public方法,不泄露
                   其他信息
    7.合成复用原则 : 尽量使用聚合,而不是继承

UML类图 : Rational工具  或者  idea中安装uml插件
    用于描述系统中类鱼类之间的各种静态关系
    依赖 : 只要是类中用到了对方,那就是依赖关系,可以是类的成员变量,方法的返回参数类型,方法的参数类型,方法中使用到的类
    泛化(继承) : 就是继承,一种特殊的依赖关系
    实现 : 就是那个实现,一种特殊的依赖关系
    关联 : 也是一种特殊的依赖关系,具有导航性,即双向关联或单向关联
    聚合 : 表示整体和部分的关系,整体和部分是可以分开的,是关联的特列,用空心菱形实线表示
        如 : A类中的成员变量 B 和 C,在创建A的时候,B和C可以为null
    组合 : 也是整体和部分的关系,但是整体和部分是不可分开的,,用实心菱形实线表示
        如 : A类中 private B = new B();在创建A类的同时一定会创建B示例
